
AVRASM ver. 2.1.30  G:\My Drive\system codes\Debug\List\ArminMashhadiEbrahim_401248082_FinaleProject.asm Sat Jun 29 03:19:09 2024

G:\My Drive\system codes\Debug\List\ArminMashhadiEbrahim_401248082_FinaleProject.asm(1088): warning: Register r5 already defined by the .DEF directive
G:\My Drive\system codes\Debug\List\ArminMashhadiEbrahim_401248082_FinaleProject.asm(1089): warning: Register r4 already defined by the .DEF directive
G:\My Drive\system codes\Debug\List\ArminMashhadiEbrahim_401248082_FinaleProject.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00db 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x0:
000033 454c
000034 2044
000035 696c
000036 6867      	.DB  0x4C,0x45,0x44,0x20,0x6C,0x69,0x67,0x68
000037 2074
000038 2520
000039 6432
00003a 2020      	.DB  0x74,0x20,0x20,0x25,0x32,0x64,0x20,0x20
00003b 2020
00003c 2020
00003d 2020
00003e 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00003f 2020
000040 2020
000041 2020
000042 0020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0
000043 464f
000044 2046
000045 2020
000046 2020      	.DB  0x4F,0x46,0x46,0x20,0x20,0x20,0x20,0x20
000047 3225
000048 2064
000049 200a
00004a 2020      	.DB  0x25,0x32,0x64,0x20,0xA,0x20,0x20,0x20
00004b 2020
00004c 2020
00004d 5f20
00004e 5f5f      	.DB  0x20,0x20,0x20,0x20,0x20,0x5F,0x5F,0x5F
00004f 2020
000050 2020
000051 2020
000052 0020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0
000053 454c
000054 2044
000055 4620
000056 4e41      	.DB  0x4C,0x45,0x44,0x20,0x20,0x46,0x41,0x4E
000057 2020
000058 4554
000059 504d
00005a 0a20      	.DB  0x20,0x20,0x54,0x45,0x4D,0x50,0x20,0xA
00005b 5f5f
00005c 205f
00005d 2020
00005e 2020      	.DB  0x5F,0x5F,0x5F,0x20,0x20,0x20,0x20,0x20
00005f 2020
000060 2020
000061 2020
000062 0020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0
000063 454c
000064 2044
000065 4620
000066 4e41      	.DB  0x4C,0x45,0x44,0x20,0x20,0x46,0x41,0x4E
000067 2020
000068 4554
000069 504d
00006a 0a20      	.DB  0x20,0x20,0x54,0x45,0x4D,0x50,0x20,0xA
00006b 2020
00006c 2020
00006d 5f20
00006e 5f5f      	.DB  0x20,0x20,0x20,0x20,0x20,0x5F,0x5F,0x5F
00006f 2020
000070 2020
000071 2020
000072 0020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x0
000073 454c
000074 2044
000075 4620
000076 4e41      	.DB  0x4C,0x45,0x44,0x20,0x20,0x46,0x41,0x4E
000077 2020
000078 4554
000079 504d
00007a 0a20      	.DB  0x20,0x20,0x54,0x45,0x4D,0x50,0x20,0xA
00007b 2020
00007c 2020
00007d 2020
00007e 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
00007f 2020
000080 5f5f
000081 205f
000082 0020      	.DB  0x20,0x20,0x5F,0x5F,0x5F,0x20,0x20,0x0
000083 464f
000084 2046
000085 2020
000086 2020      	.DB  0x4F,0x46,0x46,0x20,0x20,0x20,0x20,0x20
000087 3225
000088 2064
000089 2520
00008a 6432      	.DB  0x25,0x32,0x64,0x20,0x20,0x25,0x32,0x64
00008b 0a20
00008c 5f5f
00008d 205f
00008e 2020      	.DB  0x20,0xA,0x5F,0x5F,0x5F,0x20,0x20,0x20
00008f 2020
000090 2020
000091 2020
000092 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
000093 2020
000094 4f00
000095 4646
000096 2020      	.DB  0x20,0x20,0x0,0x4F,0x46,0x46,0x20,0x20
000097 2020
000098 2520
000099 6432
00009a 2020      	.DB  0x20,0x20,0x20,0x25,0x32,0x64,0x20,0x20
00009b 3225
00009c 2064
00009d 200a
00009e 2020      	.DB  0x25,0x32,0x64,0x20,0xA,0x20,0x20,0x20
00009f 2020
0000a0 2020
0000a1 5f20
0000a2 5f5f      	.DB  0x20,0x20,0x20,0x20,0x20,0x5F,0x5F,0x5F
0000a3 2020
0000a4 2020
0000a5 5300
0000a6 4f4c      	.DB  0x20,0x20,0x20,0x20,0x0,0x53,0x4C,0x4F
0000a7 2057
0000a8 4d20
0000a9 4445
0000aa 2020      	.DB  0x57,0x20,0x20,0x4D,0x45,0x44,0x20,0x20
0000ab 4146
0000ac 5453
0000ad 0a20
0000ae 5f5f      	.DB  0x46,0x41,0x53,0x54,0x20,0xA,0x5F,0x5F
0000af 205f
0000b0 2020
0000b1 2020
0000b2 2020      	.DB  0x5F,0x20,0x20,0x20,0x20,0x20,0x20,0x20
0000b3 2020
0000b4 2020
0000b5 5300
0000b6 4f4c      	.DB  0x20,0x20,0x20,0x20,0x0,0x53,0x4C,0x4F
0000b7 2057
0000b8 4d20
0000b9 4445
0000ba 2020      	.DB  0x57,0x20,0x20,0x4D,0x45,0x44,0x20,0x20
0000bb 4146
0000bc 5453
0000bd 0a20
0000be 2020      	.DB  0x46,0x41,0x53,0x54,0x20,0xA,0x20,0x20
0000bf 2020
0000c0 5f20
0000c1 5f5f
0000c2 2020      	.DB  0x20,0x20,0x20,0x5F,0x5F,0x5F,0x20,0x20
0000c3 2020
0000c4 2020
0000c5 5300
0000c6 4f4c      	.DB  0x20,0x20,0x20,0x20,0x0,0x53,0x4C,0x4F
0000c7 2057
0000c8 4d20
0000c9 4445
0000ca 2020      	.DB  0x57,0x20,0x20,0x4D,0x45,0x44,0x20,0x20
0000cb 4146
0000cc 5453
0000cd 0a20
0000ce 2020      	.DB  0x46,0x41,0x53,0x54,0x20,0xA,0x20,0x20
0000cf 2020
0000d0 2020
0000d1 2020
0000d2 2020      	.DB  0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20
0000d3 5f5f
0000d4 205f
G:\My Drive\system codes\Debug\List\ArminMashhadiEbrahim_401248082_FinaleProject.asm(1168): warning: .cseg .db misalignment - padding zero byte
0000d5 0000      	.DB  0x5F,0x5F,0x5F,0x20,0x0
                 _0x2020003:
0000d6 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000d7 0002      	.DW  0x02
0000d8 0280      	.DW  __base_y_G101
0000d9 01ac      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000da 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000db 94f8      	CLI
0000dc 27ee      	CLR  R30
0000dd bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000de e0f1      	LDI  R31,1
0000df bffb      	OUT  GICR,R31
0000e0 bfeb      	OUT  GICR,R30
0000e1 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000e2 e08d      	LDI  R24,(14-2)+1
0000e3 e0a2      	LDI  R26,2
0000e4 27bb      	CLR  R27
                 __CLEAR_REG:
0000e5 93ed      	ST   X+,R30
0000e6 958a      	DEC  R24
0000e7 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000e8 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000e9 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000ea e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000eb 93ed      	ST   X+,R30
0000ec 9701      	SBIW R24,1
0000ed f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000ee eaee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000ef e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000f0 9185      	LPM  R24,Z+
0000f1 9195      	LPM  R25,Z+
0000f2 9700      	SBIW R24,0
0000f3 f061      	BREQ __GLOBAL_INI_END
0000f4 91a5      	LPM  R26,Z+
0000f5 91b5      	LPM  R27,Z+
0000f6 9005      	LPM  R0,Z+
0000f7 9015      	LPM  R1,Z+
0000f8 01bf      	MOVW R22,R30
0000f9 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000fa 9005      	LPM  R0,Z+
0000fb 920d      	ST   X+,R0
0000fc 9701      	SBIW R24,1
0000fd f7e1      	BRNE __GLOBAL_INI_LOOP
0000fe 01fb      	MOVW R30,R22
0000ff cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000100 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000101 bfed      	OUT  SPL,R30
000102 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000103 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000104 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000105 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000106 940c 020e 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include<stdio.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <mega32.h>
                 ;
                 ;#include <delay.h>
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ;// Declare your global variables here
                 ;char txt[32];
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0014 {
                 
                 	.CSEG
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0015 ADMUX=adc_input | ADC_VREF_TYPE;
000108 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000109 81e8      	LD   R30,Y
00010a b9e7      	OUT  0x7,R30
                 ; 0000 0016 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0017 delay_us(10);
                +
00010b e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
00010c 958a     +DEC R24
00010d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0018 // Start the AD conversion
                 ; 0000 0019 ADCSRA|=(1<<ADSC);
00010e 9a36      	SBI  0x6,6
                 ; 0000 001A // Wait for the AD conversion to complete
                 ; 0000 001B while ((ADCSRA & (1<<ADIF))==0);
                 _0x3:
00010f 9b34      	SBIS 0x6,4
000110 cffe      	RJMP _0x3
                 ; 0000 001C ADCSRA|=(1<<ADIF);
000111 9a34      	SBI  0x6,4
                 ; 0000 001D return ADCW;
000112 b1e4      	IN   R30,0x4
000113 b1f5      	IN   R31,0x4+1
000114 940c 04fe 	JMP  _0x2080001
                 ; 0000 001E }
                 ; .FEND
                 ;void PwmLed_init(){
                 ; 0000 001F void PwmLed_init(){
                 _PwmLed_init:
                 ; .FSTART _PwmLed_init
                 ; 0000 0020       TCCR2=(1<<WGM20) | (1<<COM21) | (1<<WGM21) | (1<<CS20);
000116 e6e9      	LDI  R30,LOW(105)
000117 bde5      	OUT  0x25,R30
                 ; 0000 0021       DDRD |= (1<<DDD7);
000118 9a8f      	SBI  0x11,7
                 ; 0000 0022 }
000119 9508      	RET
                 ; .FEND
                 ;void PwmLed_init_rev(){
                 ; 0000 0023 void PwmLed_init_rev(){
                 _PwmLed_init_rev:
                 ; .FSTART _PwmLed_init_rev
                 ; 0000 0024       TCCR2=(0<<WGM20) | (0<<COM21) | (0<<WGM21) | (0<<CS20);
00011a e0e0      	LDI  R30,LOW(0)
00011b bde5      	OUT  0x25,R30
                 ; 0000 0025 }
00011c 9508      	RET
                 ; .FEND
                 ;void PwmFAN_init(){
                 ; 0000 0026 void PwmFAN_init(){
                 _PwmFAN_init:
                 ; .FSTART _PwmFAN_init
                 ; 0000 0027       TCCR0=(1<<WGM00) | (1<<COM01) | (1<<WGM01) | (1<<CS00);
00011d e6e9      	LDI  R30,LOW(105)
00011e bfe3      	OUT  0x33,R30
                 ; 0000 0028       DDRB |= (1<<DDB3);
00011f 9abb      	SBI  0x17,3
                 ; 0000 0029 }
000120 9508      	RET
                 ; .FEND
                 ;void PwmFAN_init_rev(){
                 ; 0000 002A void PwmFAN_init_rev(){
                 _PwmFAN_init_rev:
                 ; .FSTART _PwmFAN_init_rev
                 ; 0000 002B       TCCR0=(0<<WGM00) | (0<<COM01) | (0<<WGM01) | (0<<CS00);
000121 e0e0      	LDI  R30,LOW(0)
000122 bfe3      	OUT  0x33,R30
                 ; 0000 002C }
000123 9508      	RET
                 ; .FEND
                 ;int LCD_LED_LEVEL(int LedOn,int LAYER_OF_LCD,int PotentiometerInput){
                 ; 0000 002D int LCD_LED_LEVEL(int LedOn,int LAYER_OF_LCD,int PotentiometerInput){
                 _LCD_LED_LEVEL:
                 ; .FSTART _LCD_LED_LEVEL
                 ; 0000 002E       if(PINA.4){LAYER_OF_LCD = 0;}
000124 93ba      	ST   -Y,R27
000125 93aa      	ST   -Y,R26
                 ;	LedOn -> Y+4
                 ;	LAYER_OF_LCD -> Y+2
                 ;	PotentiometerInput -> Y+0
000126 9bcc      	SBIS 0x19,4
000127 c003      	RJMP _0x6
000128 e0e0      	LDI  R30,LOW(0)
000129 83ea      	STD  Y+2,R30
00012a 83eb      	STD  Y+2+1,R30
                 ; 0000 002F       if(LedOn){
                 _0x6:
                 ; 0000 0030                   sprintf(txt,"LED light  %2d                 ",PotentiometerInput);
                 ; 0000 0031             }
                 ; 0000 0032       else{
                 ; 0000 0033                   sprintf(txt,"LED light  %2d                 ",PotentiometerInput);
                 _0x3C:
00012b e6e0      	LDI  R30,LOW(_txt)
00012c e0f2      	LDI  R31,HIGH(_txt)
00012d 93fa      	ST   -Y,R31
00012e 93ea      	ST   -Y,R30
                +
00012f e6e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000130 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000131 940e 0519 	CALL SUBOPT_0x0
                 ; 0000 0034             }
                 ; 0000 0035       lcd_gotoxy(0,0);
000133 940e 0526 	CALL SUBOPT_0x1
                 ; 0000 0036       lcd_puts(txt);
                 ; 0000 0037       return LAYER_OF_LCD;
000135 81ea      	LDD  R30,Y+2
000136 81fb      	LDD  R31,Y+2+1
000137 c0d4      	RJMP _0x2080004
                 ; 0000 0038 }
                 ; .FEND
                 ;int COUNT_Pressed (int pressedUP){
                 ; 0000 0039 int COUNT_Pressed (int pressedUP){
                 _COUNT_Pressed:
                 ; .FSTART _COUNT_Pressed
                 ; 0000 003A       if(PINA.1){
000138 93ba      	ST   -Y,R27
000139 93aa      	ST   -Y,R26
                 ;	pressedUP -> Y+0
00013a 9bc9      	SBIS 0x19,1
00013b c004      	RJMP _0x9
                 ; 0000 003B             pressedUP++;
00013c 81e8      	LD   R30,Y
00013d 81f9      	LDD  R31,Y+1
00013e 9631      	ADIW R30,1
00013f c005      	RJMP _0x3D
                 ; 0000 003C       }
                 ; 0000 003D       else if (PINA.2){
                 _0x9:
000140 9bca      	SBIS 0x19,2
000141 c005      	RJMP _0xB
                 ; 0000 003E             pressedUP--;
000142 81e8      	LD   R30,Y
000143 81f9      	LDD  R31,Y+1
000144 9731      	SBIW R30,1
                 _0x3D:
000145 83e8      	ST   Y,R30
000146 83f9      	STD  Y+1,R31
                 ; 0000 003F       }
                 ; 0000 0040       return pressedUP;
                 _0xB:
000147 81e8      	LD   R30,Y
000148 81f9      	LDD  R31,Y+1
000149 940c 049e 	JMP  _0x2080002
                 ; 0000 0041 }
                 ; .FEND
                 ;int COUNT_Pressed_TEMP (int TEMP_LEVEL){
                 ; 0000 0042 int COUNT_Pressed_TEMP (int TEMP_LEVEL){
                 _COUNT_Pressed_TEMP:
                 ; .FSTART _COUNT_Pressed_TEMP
                 ; 0000 0043       if(PINA.1){
00014b 93ba      	ST   -Y,R27
00014c 93aa      	ST   -Y,R26
                 ;	TEMP_LEVEL -> Y+0
00014d 9bc9      	SBIS 0x19,1
00014e c004      	RJMP _0xC
                 ; 0000 0044             TEMP_LEVEL++;
00014f 81e8      	LD   R30,Y
000150 81f9      	LDD  R31,Y+1
000151 9631      	ADIW R30,1
000152 c005      	RJMP _0x3E
                 ; 0000 0045       }
                 ; 0000 0046       else if (PINA.2){
                 _0xC:
000153 9bca      	SBIS 0x19,2
000154 c005      	RJMP _0xE
                 ; 0000 0047             TEMP_LEVEL--;
000155 81e8      	LD   R30,Y
000156 81f9      	LDD  R31,Y+1
000157 9731      	SBIW R30,1
                 _0x3E:
000158 83e8      	ST   Y,R30
000159 83f9      	STD  Y+1,R31
                 ; 0000 0048       }
                 ; 0000 0049       sprintf(txt,"OFF     %2d \n        ___       ",TEMP_LEVEL);
                 _0xE:
00015a 940e 052f 	CALL SUBOPT_0x2
                +
00015c e8e6     +LDI R30 , LOW ( 2 * _0x0 + ( 32 ) )
00015d e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 32 ) )
                 	__POINTW1FN _0x0,32
00015e 940e 0519 	CALL SUBOPT_0x0
                 ; 0000 004A       lcd_gotoxy(0,0);
000160 940e 0526 	CALL SUBOPT_0x1
                 ; 0000 004B       lcd_puts(txt);
                 ; 0000 004C       return TEMP_LEVEL;
000162 81e8      	LD   R30,Y
000163 81f9      	LDD  R31,Y+1
000164 940c 049e 	JMP  _0x2080002
                 ; 0000 004D }
                 ; .FEND
                 ;int LCD_MENU(int pressedUP,int LAYER_OF_LCD){
                 ; 0000 004E int LCD_MENU(int pressedUP,int LAYER_OF_LCD){
                 _LCD_MENU:
                 ; .FSTART _LCD_MENU
                 ; 0000 004F       if(pressedUP % 3 == 0){
000166 940e 0534 	CALL SUBOPT_0x3
                 ;	pressedUP -> Y+2
                 ;	LAYER_OF_LCD -> Y+0
000168 f469      	BRNE _0xF
                 ; 0000 0050             sprintf(txt,"LED  FAN  TEMP \n___            ");
000169 940e 052f 	CALL SUBOPT_0x2
                +
00016b eae6     +LDI R30 , LOW ( 2 * _0x0 + ( 64 ) )
00016c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 64 ) )
                 	__POINTW1FN _0x0,64
00016d 940e 053e 	CALL SUBOPT_0x4
                 ; 0000 0051             lcd_gotoxy(0,0);
                 ; 0000 0052             lcd_puts(txt);
                 ; 0000 0053             if(PINA.3){LAYER_OF_LCD = 1;}
00016f 9bcb      	SBIS 0x19,3
000170 c004      	RJMP _0x10
000171 e0e1      	LDI  R30,LOW(1)
000172 e0f0      	LDI  R31,HIGH(1)
000173 83e8      	ST   Y,R30
000174 83f9      	STD  Y+1,R31
                 ; 0000 0054             }
                 _0x10:
                 ; 0000 0055       else if(pressedUP % 3 == 2){
000175 c025      	RJMP _0x11
                 _0xF:
000176 940e 0545 	CALL SUBOPT_0x5
000178 30e2      	CPI  R30,LOW(0x2)
000179 e0a0      	LDI  R26,HIGH(0x2)
00017a 07fa      	CPC  R31,R26
00017b f469      	BRNE _0x12
                 ; 0000 0056             sprintf(txt,"LED  FAN  TEMP \n     ___       ");
00017c 940e 052f 	CALL SUBOPT_0x2
                +
00017e ece6     +LDI R30 , LOW ( 2 * _0x0 + ( 96 ) )
00017f e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 96 ) )
                 	__POINTW1FN _0x0,96
000180 940e 053e 	CALL SUBOPT_0x4
                 ; 0000 0057             lcd_gotoxy(0,0);
                 ; 0000 0058             lcd_puts(txt);
                 ; 0000 0059             if(PINA.3){LAYER_OF_LCD = 10;}
000182 9bcb      	SBIS 0x19,3
000183 c004      	RJMP _0x13
000184 e0ea      	LDI  R30,LOW(10)
000185 e0f0      	LDI  R31,HIGH(10)
000186 83e8      	ST   Y,R30
000187 83f9      	STD  Y+1,R31
                 ; 0000 005A       }
                 _0x13:
                 ; 0000 005B       else if(pressedUP % 3 == 1){
000188 c012      	RJMP _0x14
                 _0x12:
000189 940e 0545 	CALL SUBOPT_0x5
00018b 30e1      	CPI  R30,LOW(0x1)
00018c e0a0      	LDI  R26,HIGH(0x1)
00018d 07fa      	CPC  R31,R26
00018e f461      	BRNE _0x15
                 ; 0000 005C             sprintf(txt,"LED  FAN  TEMP \n          ___  ");
00018f 940e 052f 	CALL SUBOPT_0x2
                +
000191 eee6     +LDI R30 , LOW ( 2 * _0x0 + ( 128 ) )
000192 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 128 ) )
                 	__POINTW1FN _0x0,128
000193 940e 053e 	CALL SUBOPT_0x4
                 ; 0000 005D             lcd_gotoxy(0,0);
                 ; 0000 005E             lcd_puts(txt);
                 ; 0000 005F             if(PINA.3){LAYER_OF_LCD = 20;}
000195 9bcb      	SBIS 0x19,3
000196 c004      	RJMP _0x16
000197 e1e4      	LDI  R30,LOW(20)
000198 e0f0      	LDI  R31,HIGH(20)
000199 83e8      	ST   Y,R30
00019a 83f9      	STD  Y+1,R31
                 ; 0000 0060       }
                 _0x16:
                 ; 0000 0061       return LAYER_OF_LCD;
                 _0x15:
                 _0x14:
                 _0x11:
00019b 81e8      	LD   R30,Y
00019c 81f9      	LDD  R31,Y+1
00019d 9624      	ADIW R28,4
00019e 9508      	RET
                 ; 0000 0062 }
                 ; .FEND
                 ;int LCD_CHANGE_TEMP(int LAYER_OF_LCD,int pressedUP,int TEMP_LEVEL,int tempreture){
                 ; 0000 0063 int LCD_CHANGE_TEMP(int LAYER_OF_LCD,int pressedUP,int TEMP_LEVEL,int tempreture){
                 _LCD_CHANGE_TEMP:
                 ; .FSTART _LCD_CHANGE_TEMP
                 ; 0000 0064       if(pressedUP % 2 == 0){
00019f 93ba      	ST   -Y,R27
0001a0 93aa      	ST   -Y,R26
                 ;	LAYER_OF_LCD -> Y+6
                 ;	pressedUP -> Y+4
                 ;	TEMP_LEVEL -> Y+2
                 ;	tempreture -> Y+0
0001a1 940e 054c 	CALL SUBOPT_0x6
0001a3 9730      	SBIW R30,0
0001a4 f461      	BRNE _0x17
                 ; 0000 0065             sprintf(txt,"OFF     %2d  %2d \n___             ",TEMP_LEVEL,tempreture);
0001a5 940e 052f 	CALL SUBOPT_0x2
                +
0001a7 e0e6     +LDI R30 , LOW ( 2 * _0x0 + ( 160 ) )
0001a8 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 160 ) )
                 	__POINTW1FN _0x0,160
0001a9 940e 0553 	CALL SUBOPT_0x7
                 ; 0000 0066             lcd_gotoxy(0,0);
                 ; 0000 0067             lcd_puts(txt);
                 ; 0000 0068             if(PINA.3){TEMP_LEVEL = 0;}
0001ab 9bcb      	SBIS 0x19,3
0001ac c003      	RJMP _0x18
0001ad e0e0      	LDI  R30,LOW(0)
0001ae 83ea      	STD  Y+2,R30
0001af 83eb      	STD  Y+2+1,R30
                 ; 0000 0069             }
                 _0x18:
                 ; 0000 006A       else if(pressedUP % 2 == 1){
0001b0 c01d      	RJMP _0x19
                 _0x17:
0001b1 940e 054c 	CALL SUBOPT_0x6
0001b3 30e1      	CPI  R30,LOW(0x1)
0001b4 e0a0      	LDI  R26,HIGH(0x1)
0001b5 07fa      	CPC  R31,R26
0001b6 f4b9      	BRNE _0x1A
                 ; 0000 006B             sprintf(txt,"OFF     %2d  %2d \n        ___    ",TEMP_LEVEL,tempreture);
0001b7 940e 052f 	CALL SUBOPT_0x2
                +
0001b9 e2e9     +LDI R30 , LOW ( 2 * _0x0 + ( 195 ) )
0001ba e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 195 ) )
                 	__POINTW1FN _0x0,195
0001bb 940e 0553 	CALL SUBOPT_0x7
                 ; 0000 006C             lcd_gotoxy(0,0);
                 ; 0000 006D             lcd_puts(txt);
                 ; 0000 006E             if(PINA.3){
0001bd 9bcb      	SBIS 0x19,3
0001be c008      	RJMP _0x1B
                 ; 0000 006F                   while(PINA.4 == 0){
                 _0x1C:
0001bf 99cc      	SBIC 0x19,4
0001c0 c006      	RJMP _0x1E
                 ; 0000 0070                         TEMP_LEVEL = COUNT_Pressed_TEMP(TEMP_LEVEL);
0001c1 81aa      	LDD  R26,Y+2
0001c2 81bb      	LDD  R27,Y+2+1
0001c3 df87      	RCALL _COUNT_Pressed_TEMP
0001c4 83ea      	STD  Y+2,R30
0001c5 83fb      	STD  Y+2+1,R31
                 ; 0000 0071                   }
0001c6 cff8      	RJMP _0x1C
                 _0x1E:
                 ; 0000 0072             }
                 ; 0000 0073             if(PINA.4){
                 _0x1B:
0001c7 9bcc      	SBIS 0x19,4
0001c8 c003      	RJMP _0x1F
                 ; 0000 0074             LAYER_OF_LCD = 0;
0001c9 e0e0      	LDI  R30,LOW(0)
0001ca 83ee      	STD  Y+6,R30
0001cb 83ef      	STD  Y+6+1,R30
                 ; 0000 0075       }
                 ; 0000 0076       return LAYER_OF_LCD;
                 _0x1F:
0001cc 81ee      	LDD  R30,Y+6
0001cd 81ff      	LDD  R31,Y+6+1
                 ; 0000 0077       }
                 ; 0000 0078 }
                 _0x1A:
                 _0x19:
                 _0x2080005:
0001ce 9628      	ADIW R28,8
0001cf 9508      	RET
                 ; .FEND
                 ;int LCD_FAN_SPEED(int LAYER_OF_LCD,int pressedUP , int FAN_LEVEL){
                 ; 0000 0079 int LCD_FAN_SPEED(int LAYER_OF_LCD,int pressedUP , int FAN_LEVEL){
                 _LCD_FAN_SPEED:
                 ; .FSTART _LCD_FAN_SPEED
                 ; 0000 007A       if(pressedUP % 3 == 0){
0001d0 940e 0534 	CALL SUBOPT_0x3
                 ;	LAYER_OF_LCD -> Y+4
                 ;	pressedUP -> Y+2
                 ;	FAN_LEVEL -> Y+0
0001d2 f469      	BRNE _0x20
                 ; 0000 007B             sprintf(txt,"SLOW  MED  FAST \n___           ");
0001d3 940e 052f 	CALL SUBOPT_0x2
                +
0001d5 e4eb     +LDI R30 , LOW ( 2 * _0x0 + ( 229 ) )
0001d6 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 229 ) )
                 	__POINTW1FN _0x0,229
0001d7 940e 053e 	CALL SUBOPT_0x4
                 ; 0000 007C             lcd_gotoxy(0,0);
                 ; 0000 007D             lcd_puts(txt);
                 ; 0000 007E             if(PINA.3){FAN_LEVEL = 100;}
0001d9 9bcb      	SBIS 0x19,3
0001da c004      	RJMP _0x21
0001db e6e4      	LDI  R30,LOW(100)
0001dc e0f0      	LDI  R31,HIGH(100)
0001dd 83e8      	ST   Y,R30
0001de 83f9      	STD  Y+1,R31
                 ; 0000 007F             }
                 _0x21:
                 ; 0000 0080       else if(pressedUP % 3 == 2){
0001df c025      	RJMP _0x22
                 _0x20:
0001e0 940e 0545 	CALL SUBOPT_0x5
0001e2 30e2      	CPI  R30,LOW(0x2)
0001e3 e0a0      	LDI  R26,HIGH(0x2)
0001e4 07fa      	CPC  R31,R26
0001e5 f469      	BRNE _0x23
                 ; 0000 0081             sprintf(txt,"SLOW  MED  FAST \n     ___      ");
0001e6 940e 052f 	CALL SUBOPT_0x2
                +
0001e8 e6eb     +LDI R30 , LOW ( 2 * _0x0 + ( 261 ) )
0001e9 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 261 ) )
                 	__POINTW1FN _0x0,261
0001ea 940e 053e 	CALL SUBOPT_0x4
                 ; 0000 0082             lcd_gotoxy(0,0);
                 ; 0000 0083             lcd_puts(txt);
                 ; 0000 0084             if(PINA.3){FAN_LEVEL = 177;}
0001ec 9bcb      	SBIS 0x19,3
0001ed c004      	RJMP _0x24
0001ee ebe1      	LDI  R30,LOW(177)
0001ef e0f0      	LDI  R31,HIGH(177)
0001f0 83e8      	ST   Y,R30
0001f1 83f9      	STD  Y+1,R31
                 ; 0000 0085       }
                 _0x24:
                 ; 0000 0086       else if(pressedUP % 3 == 1){
0001f2 c012      	RJMP _0x25
                 _0x23:
0001f3 940e 0545 	CALL SUBOPT_0x5
0001f5 30e1      	CPI  R30,LOW(0x1)
0001f6 e0a0      	LDI  R26,HIGH(0x1)
0001f7 07fa      	CPC  R31,R26
0001f8 f461      	BRNE _0x26
                 ; 0000 0087             sprintf(txt,"SLOW  MED  FAST \n          ___ ");
0001f9 940e 052f 	CALL SUBOPT_0x2
                +
0001fb e8eb     +LDI R30 , LOW ( 2 * _0x0 + ( 293 ) )
0001fc e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 293 ) )
                 	__POINTW1FN _0x0,293
0001fd 940e 053e 	CALL SUBOPT_0x4
                 ; 0000 0088             lcd_gotoxy(0,0);
                 ; 0000 0089             lcd_puts(txt);
                 ; 0000 008A             if(PINA.3){FAN_LEVEL = 255;}
0001ff 9bcb      	SBIS 0x19,3
000200 c004      	RJMP _0x27
000201 efef      	LDI  R30,LOW(255)
000202 e0f0      	LDI  R31,HIGH(255)
000203 83e8      	ST   Y,R30
000204 83f9      	STD  Y+1,R31
                 ; 0000 008B       }
                 _0x27:
                 ; 0000 008C       if(PINA.4){
                 _0x26:
                 _0x25:
                 _0x22:
000205 9bcc      	SBIS 0x19,4
000206 c003      	RJMP _0x28
                 ; 0000 008D             LAYER_OF_LCD = 0;
000207 e0e0      	LDI  R30,LOW(0)
000208 83ec      	STD  Y+4,R30
000209 83ed      	STD  Y+4+1,R30
                 ; 0000 008E       }
                 ; 0000 008F       return LAYER_OF_LCD;
                 _0x28:
00020a 81ec      	LDD  R30,Y+4
00020b 81fd      	LDD  R31,Y+4+1
                 _0x2080004:
00020c 9626      	ADIW R28,6
00020d 9508      	RET
                 ; 0000 0090 }
                 ; .FEND
                 ;void main(void)
                 ; 0000 0092 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0093 // Declare your local variables here
                 ; 0000 0094 int PotentiometerInput ;
                 ; 0000 0095 int LedOn;
                 ; 0000 0096 int pressedUP =0;
                 ; 0000 0097 int LAYER_OF_LCD = 0;
                 ; 0000 0098 int tempreture;
                 ; 0000 0099 int TEMP_LEVEL = 30;
                 ; 0000 009A int FAN_LEVEL = 255;
                 ; 0000 009B // Input/Output Ports initialization
                 ; 0000 009C // Port A initialization
                 ; 0000 009D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 009E DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
00020e 9728      	SBIW R28,8
00020f efef      	LDI  R30,LOW(255)
000210 83e8      	ST   Y,R30
000211 e0e0      	LDI  R30,LOW(0)
000212 83e9      	STD  Y+1,R30
000213 e1ee      	LDI  R30,LOW(30)
000214 83ea      	STD  Y+2,R30
000215 e0e0      	LDI  R30,LOW(0)
000216 83eb      	STD  Y+3,R30
000217 83ec      	STD  Y+4,R30
000218 83ed      	STD  Y+5,R30
000219 83ee      	STD  Y+6,R30
00021a 83ef      	STD  Y+7,R30
                 ;	PotentiometerInput -> R16,R17
                 ;	LedOn -> R18,R19
                 ;	pressedUP -> R20,R21
                 ;	LAYER_OF_LCD -> Y+6
                 ;	tempreture -> Y+4
                 ;	TEMP_LEVEL -> Y+2
                 ;	FAN_LEVEL -> Y+0
                +
00021b e040     +LDI R20 , LOW ( 0 )
00021c e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
00021d bbea      	OUT  0x1A,R30
                 ; 0000 009F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00A0 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
00021e bbeb      	OUT  0x1B,R30
                 ; 0000 00A1 
                 ; 0000 00A2 // Port B initialization
                 ; 0000 00A3 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 00A4 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00021f e0e8      	LDI  R30,LOW(8)
000220 bbe7      	OUT  0x17,R30
                 ; 0000 00A5 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 00A6 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000221 e0e0      	LDI  R30,LOW(0)
000222 bbe8      	OUT  0x18,R30
                 ; 0000 00A7 
                 ; 0000 00A8 // Port C initialization
                 ; 0000 00A9 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00AA DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (0<<DDC0);
000223 e0ee      	LDI  R30,LOW(14)
000224 bbe4      	OUT  0x14,R30
                 ; 0000 00AB // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 00AC PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000225 e0e0      	LDI  R30,LOW(0)
000226 bbe5      	OUT  0x15,R30
                 ; 0000 00AD 
                 ; 0000 00AE // Port D initialization
                 ; 0000 00AF // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00B0 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000227 bbe1      	OUT  0x11,R30
                 ; 0000 00B1 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00B2 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000228 bbe2      	OUT  0x12,R30
                 ; 0000 00B3 
                 ; 0000 00B4 // Timer/Counter 0 initialization
                 ; 0000 00B5 // Clock source: System Clock
                 ; 0000 00B6 // Clock value: 31.250 kHz
                 ; 0000 00B7 // Mode: Normal top=0xFF
                 ; 0000 00B8 // OC0 output: Disconnected
                 ; 0000 00B9 // Timer Period: 8 ms
                 ; 0000 00BA TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (1<<CS02) | (0<<CS01) | (0<<CS00);
000229 e0e4      	LDI  R30,LOW(4)
00022a bfe3      	OUT  0x33,R30
                 ; 0000 00BB TCNT0=0x06;
00022b e0e6      	LDI  R30,LOW(6)
00022c bfe2      	OUT  0x32,R30
                 ; 0000 00BC OCR0=0x00;
00022d e0e0      	LDI  R30,LOW(0)
00022e bfec      	OUT  0x3C,R30
                 ; 0000 00BD 
                 ; 0000 00BE // Timer/Counter 1 initialization
                 ; 0000 00BF // Clock source: System Clock
                 ; 0000 00C0 // Clock value: Timer1 Stopped
                 ; 0000 00C1 // Mode: Normal top=0xFFFF
                 ; 0000 00C2 // OC1A output: Disconnected
                 ; 0000 00C3 // OC1B output: Disconnected
                 ; 0000 00C4 // Noise Canceler: Off
                 ; 0000 00C5 // Input Capture on Falling Edge
                 ; 0000 00C6 // Timer1 Overflow Interrupt: Off
                 ; 0000 00C7 // Input Capture Interrupt: Off
                 ; 0000 00C8 // Compare A Match Interrupt: Off
                 ; 0000 00C9 // Compare B Match Interrupt: Off
                 ; 0000 00CA TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
00022f bdef      	OUT  0x2F,R30
                 ; 0000 00CB TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000230 bdee      	OUT  0x2E,R30
                 ; 0000 00CC TCNT1H=0x00;
000231 bded      	OUT  0x2D,R30
                 ; 0000 00CD TCNT1L=0x00;
000232 bdec      	OUT  0x2C,R30
                 ; 0000 00CE ICR1H=0x00;
000233 bde7      	OUT  0x27,R30
                 ; 0000 00CF ICR1L=0x00;
000234 bde6      	OUT  0x26,R30
                 ; 0000 00D0 OCR1AH=0x00;
000235 bdeb      	OUT  0x2B,R30
                 ; 0000 00D1 OCR1AL=0x00;
000236 bdea      	OUT  0x2A,R30
                 ; 0000 00D2 OCR1BH=0x00;
000237 bde9      	OUT  0x29,R30
                 ; 0000 00D3 OCR1BL=0x00;
000238 bde8      	OUT  0x28,R30
                 ; 0000 00D4 
                 ; 0000 00D5 // Timer/Counter 2 initialization
                 ; 0000 00D6 // Clock source: System Clock
                 ; 0000 00D7 // Clock value: Timer2 Stopped
                 ; 0000 00D8 // Mode: Normal top=0xFF
                 ; 0000 00D9 // OC2 output: Disconnected
                 ; 0000 00DA ASSR=0<<AS2;
000239 bde2      	OUT  0x22,R30
                 ; 0000 00DB TCCR2=(1<<WGM20) | (0<<COM21) | (0<<COM20) | (1<<WGM21) | (1<<CS22) | (0<<CS21) | (0<<CS20);
00023a e4ec      	LDI  R30,LOW(76)
00023b bde5      	OUT  0x25,R30
                 ; 0000 00DC TCNT2=0x00;
00023c e0e0      	LDI  R30,LOW(0)
00023d bde4      	OUT  0x24,R30
                 ; 0000 00DD OCR2=0x00;
00023e bde3      	OUT  0x23,R30
                 ; 0000 00DE 
                 ; 0000 00DF // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00E0 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
00023f e0e1      	LDI  R30,LOW(1)
000240 bfe9      	OUT  0x39,R30
                 ; 0000 00E1 
                 ; 0000 00E2 // External Interrupt(s) initialization
                 ; 0000 00E3 // INT0: Off
                 ; 0000 00E4 // INT1: Off
                 ; 0000 00E5 // INT2: Off
                 ; 0000 00E6 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000241 e0e0      	LDI  R30,LOW(0)
000242 bfe5      	OUT  0x35,R30
                 ; 0000 00E7 MCUCSR=(0<<ISC2);
000243 bfe4      	OUT  0x34,R30
                 ; 0000 00E8 
                 ; 0000 00E9 // USART initialization
                 ; 0000 00EA // USART disabled
                 ; 0000 00EB UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000244 b9ea      	OUT  0xA,R30
                 ; 0000 00EC 
                 ; 0000 00ED // Analog Comparator initialization
                 ; 0000 00EE // Analog Comparator: Off
                 ; 0000 00EF // The Analog Comparator's positive input is
                 ; 0000 00F0 // connected to the AIN0 pin
                 ; 0000 00F1 // The Analog Comparator's negative input is
                 ; 0000 00F2 // connected to the AIN1 pin
                 ; 0000 00F3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000245 e8e0      	LDI  R30,LOW(128)
000246 b9e8      	OUT  0x8,R30
                 ; 0000 00F4 
                 ; 0000 00F5 // ADC initialization
                 ; 0000 00F6 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 00F7 // ADC Voltage Reference: AREF pin
                 ; 0000 00F8 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 00F9 ADMUX=ADC_VREF_TYPE;
000247 e0e0      	LDI  R30,LOW(0)
000248 b9e7      	OUT  0x7,R30
                 ; 0000 00FA ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000249 e8e3      	LDI  R30,LOW(131)
00024a b9e6      	OUT  0x6,R30
                 ; 0000 00FB SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00024b e0e0      	LDI  R30,LOW(0)
00024c bfe0      	OUT  0x30,R30
                 ; 0000 00FC 
                 ; 0000 00FD // SPI initialization
                 ; 0000 00FE // SPI disabled
                 ; 0000 00FF SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00024d b9ed      	OUT  0xD,R30
                 ; 0000 0100 
                 ; 0000 0101 // TWI initialization
                 ; 0000 0102 // TWI disabled
                 ; 0000 0103 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
00024e bfe6      	OUT  0x36,R30
                 ; 0000 0104 
                 ; 0000 0105 // Alphanumeric LCD initialization
                 ; 0000 0106 // Connections are specified in the
                 ; 0000 0107 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0108 // RS - PORTB Bit 0
                 ; 0000 0109 // RD - PORTB Bit 1
                 ; 0000 010A // EN - PORTB Bit 2
                 ; 0000 010B // D4 - PORTB Bit 4
                 ; 0000 010C // D5 - PORTB Bit 5
                 ; 0000 010D // D6 - PORTB Bit 6
                 ; 0000 010E // D7 - PORTB Bit 7
                 ; 0000 010F // Characters/line: 20
                 ; 0000 0110 lcd_init(20);
00024f e1a4      	LDI  R26,LOW(20)
000250 940e 04d2 	CALL _lcd_init
                 ; 0000 0111 
                 ; 0000 0112 
                 ; 0000 0113 
                 ; 0000 0114 // Global enable interrupts
                 ; 0000 0115 #asm("sei")
000252 9478      	sei
                 ; 0000 0116 
                 ; 0000 0117 
                 ; 0000 0118 while (1)
                 _0x29:
                 ; 0000 0119       {
                 ; 0000 011A             LedOn = PINC.0;
000253 e0e0      	LDI  R30,0
000254 9998      	SBIC 0x13,0
000255 e0e1      	LDI  R30,1
000256 2f2e      	MOV  R18,R30
000257 2733      	CLR  R19
                 ; 0000 011B             if(LedOn){
000258 2e02      	MOV  R0,R18
000259 2a03      	OR   R0,R19
00025a f031      	BREQ _0x2C
                 ; 0000 011C                   PotentiometerInput = read_adc(5);
00025b e0a5      	LDI  R26,LOW(5)
00025c deab      	RCALL _read_adc
00025d 018f      	MOVW R16,R30
                 ; 0000 011D                   OCR2 = PotentiometerInput;
00025e bd03      	OUT  0x23,R16
                 ; 0000 011E                   PwmLed_init();
00025f deb6      	RCALL _PwmLed_init
                 ; 0000 011F             }
                 ; 0000 0120             else{
000260 c006      	RJMP _0x2D
                 _0x2C:
                 ; 0000 0121                   PORTD.7 = LedOn;
000261 3020      	CPI  R18,0
000262 f411      	BRNE _0x2E
000263 9897      	CBI  0x12,7
000264 c001      	RJMP _0x2F
                 _0x2E:
000265 9a97      	SBI  0x12,7
                 _0x2F:
                 ; 0000 0122                   PwmLed_init_rev();
000266 deb3      	RCALL _PwmLed_init_rev
                 ; 0000 0123             }
                 _0x2D:
                 ; 0000 0124             tempreture = read_adc(0);
000267 e0a0      	LDI  R26,LOW(0)
000268 de9f      	RCALL _read_adc
000269 83ec      	STD  Y+4,R30
00026a 83fd      	STD  Y+4+1,R31
                 ; 0000 0125             tempreture = (int)((float)tempreture/1023*5*100);
00026b 940e 06e6 	CALL __CWD1
00026d 940e 0615 	CALL __CDF1
00026f 01df      	MOVW R26,R30
000270 01cb      	MOVW R24,R22
                +
000271 e0e0     +LDI R30 , LOW ( 0x447FC000 )
000272 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
000273 e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
000274 e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
000275 940e 0691 	CALL __DIVF21
                +
000277 e0a0     +LDI R26 , LOW ( 0x40A00000 )
000278 e0b0     +LDI R27 , HIGH ( 0x40A00000 )
000279 ea80     +LDI R24 , BYTE3 ( 0x40A00000 )
00027a e490     +LDI R25 , BYTE4 ( 0x40A00000 )
                 	__GETD2N 0x40A00000
00027b 940e 0643 	CALL __MULF12
                +
00027d e0a0     +LDI R26 , LOW ( 0x42C80000 )
00027e e0b0     +LDI R27 , HIGH ( 0x42C80000 )
00027f ec88     +LDI R24 , BYTE3 ( 0x42C80000 )
000280 e492     +LDI R25 , BYTE4 ( 0x42C80000 )
                 	__GETD2N 0x42C80000
000281 940e 0643 	CALL __MULF12
000283 940e 05de 	CALL __CFD1
000285 83ec      	STD  Y+4,R30
000286 83fd      	STD  Y+4+1,R31
                 ; 0000 0126             if(tempreture > TEMP_LEVEL){
000287 81ea      	LDD  R30,Y+2
000288 81fb      	LDD  R31,Y+2+1
000289 81ac      	LDD  R26,Y+4
00028a 81bd      	LDD  R27,Y+4+1
00028b 17ea      	CP   R30,R26
00028c 07fb      	CPC  R31,R27
00028d f424      	BRGE _0x30
                 ; 0000 0127                   OCR0 = FAN_LEVEL;
00028e 81e8      	LD   R30,Y
00028f bfec      	OUT  0x3C,R30
                 ; 0000 0128                   PwmFAN_init();
000290 de8c      	RCALL _PwmFAN_init
                 ; 0000 0129             }
                 ; 0000 012A             else{
000291 c002      	RJMP _0x31
                 _0x30:
                 ; 0000 012B                   PORTB.3 = 0;
000292 98c3      	CBI  0x18,3
                 ; 0000 012C                   PwmFAN_init_rev();
000293 de8d      	RCALL _PwmFAN_init_rev
                 ; 0000 012D             }
                 _0x31:
                 ; 0000 012E             pressedUP = COUNT_Pressed(pressedUP);
000294 01da      	MOVW R26,R20
000295 dea2      	RCALL _COUNT_Pressed
000296 01af      	MOVW R20,R30
                 ; 0000 012F             if (LAYER_OF_LCD == 0){
000297 81ee      	LDD  R30,Y+6
000298 81ff      	LDD  R31,Y+6+1
000299 9730      	SBIW R30,0
00029a f431      	BRNE _0x34
                 ; 0000 0130                   LAYER_OF_LCD = LCD_MENU(pressedUP,LAYER_OF_LCD);
00029b 935a      	ST   -Y,R21
00029c 934a      	ST   -Y,R20
00029d 85a8      	LDD  R26,Y+8
00029e 85b9      	LDD  R27,Y+8+1
00029f dec6      	RCALL _LCD_MENU
0002a0 c026      	RJMP _0x3F
                 ; 0000 0131             }
                 ; 0000 0132             else if (LAYER_OF_LCD == 1){
                 _0x34:
0002a1 81ae      	LDD  R26,Y+6
0002a2 81bf      	LDD  R27,Y+6+1
0002a3 9711      	SBIW R26,1
0002a4 f449      	BRNE _0x36
                 ; 0000 0133                   LAYER_OF_LCD = LCD_LED_LEVEL(LedOn,LAYER_OF_LCD,PotentiometerInput);
0002a5 933a      	ST   -Y,R19
0002a6 932a      	ST   -Y,R18
0002a7 85e8      	LDD  R30,Y+8
0002a8 85f9      	LDD  R31,Y+8+1
0002a9 93fa      	ST   -Y,R31
0002aa 93ea      	ST   -Y,R30
0002ab 01d8      	MOVW R26,R16
0002ac de77      	RCALL _LCD_LED_LEVEL
0002ad c019      	RJMP _0x3F
                 ; 0000 0134             }
                 ; 0000 0135             else if (LAYER_OF_LCD == 20){
                 _0x36:
0002ae 81ae      	LDD  R26,Y+6
0002af 81bf      	LDD  R27,Y+6+1
0002b0 9754      	SBIW R26,20
0002b1 f451      	BRNE _0x38
                 ; 0000 0136                   LAYER_OF_LCD = LCD_CHANGE_TEMP(LAYER_OF_LCD,pressedUP,TEMP_LEVEL,tempreture);
0002b2 940e 0566 	CALL SUBOPT_0x8
0002b4 935a      	ST   -Y,R21
0002b5 934a      	ST   -Y,R20
0002b6 940e 0566 	CALL SUBOPT_0x8
0002b8 85aa      	LDD  R26,Y+10
0002b9 85bb      	LDD  R27,Y+10+1
0002ba dee4      	RCALL _LCD_CHANGE_TEMP
0002bb c00b      	RJMP _0x3F
                 ; 0000 0137             }
                 ; 0000 0138             else if (LAYER_OF_LCD == 10){
                 _0x38:
0002bc 81ae      	LDD  R26,Y+6
0002bd 81bf      	LDD  R27,Y+6+1
0002be 971a      	SBIW R26,10
0002bf f449      	BRNE _0x3A
                 ; 0000 0139                   LAYER_OF_LCD = LCD_FAN_SPEED(LAYER_OF_LCD,pressedUP,FAN_LEVEL);
0002c0 940e 0566 	CALL SUBOPT_0x8
0002c2 935a      	ST   -Y,R21
0002c3 934a      	ST   -Y,R20
0002c4 81ac      	LDD  R26,Y+4
0002c5 81bd      	LDD  R27,Y+4+1
0002c6 df09      	RCALL _LCD_FAN_SPEED
                 _0x3F:
0002c7 83ee      	STD  Y+6,R30
0002c8 83ff      	STD  Y+6+1,R31
                 ; 0000 013A             }
                 ; 0000 013B 
                 ; 0000 013C       }
                 _0x3A:
0002c9 cf89      	RJMP _0x29
                 ; 0000 013D }
                 _0x3B:
0002ca cfff      	RJMP _0x3B
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0002cb 93ba      	ST   -Y,R27
0002cc 93aa      	ST   -Y,R26
0002cd 931a      	ST   -Y,R17
0002ce 930a      	ST   -Y,R16
0002cf 81aa      	LDD  R26,Y+2
0002d0 81bb      	LDD  R27,Y+2+1
0002d1 9612      	ADIW R26,2
0002d2 940e 070c 	CALL __GETW1P
0002d4 9730      	SBIW R30,0
0002d5 f159      	BREQ _0x2000010
0002d6 81aa      	LDD  R26,Y+2
0002d7 81bb      	LDD  R27,Y+2+1
0002d8 9614      	ADIW R26,4
0002d9 940e 070c 	CALL __GETW1P
0002db 018f      	MOVW R16,R30
0002dc 9730      	SBIW R30,0
0002dd f061      	BREQ _0x2000012
                +
0002de 3002     +CPI R16 , LOW ( 2 )
0002df e0e0     +LDI R30 , HIGH ( 2 )
0002e0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0002e1 f098      	BRLO _0x2000013
0002e2 01f8      	MOVW R30,R16
0002e3 9731      	SBIW R30,1
0002e4 018f      	MOVW R16,R30
                +
0002e5 81aa     +LDD R26 , Y + 2
0002e6 81bb     +LDD R27 , Y + 2 + 1
0002e7 9614     +ADIW R26 , 4
0002e8 93ed     +ST X + , R30
0002e9 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0002ea 81aa      	LDD  R26,Y+2
0002eb 81bb      	LDD  R27,Y+2+1
0002ec 9612      	ADIW R26,2
0002ed 91ed      	LD   R30,X+
0002ee 91fd      	LD   R31,X+
0002ef 9631      	ADIW R30,1
0002f0 93fe      	ST   -X,R31
0002f1 93ee      	ST   -X,R30
0002f2 9731      	SBIW R30,1
0002f3 81ac      	LDD  R26,Y+4
0002f4 83a0      	STD  Z+0,R26
                 _0x2000013:
0002f5 81aa      	LDD  R26,Y+2
0002f6 81bb      	LDD  R27,Y+2+1
0002f7 940e 070c 	CALL __GETW1P
0002f9 23ff      	TST  R31
0002fa f02a      	BRMI _0x2000014
0002fb 91ed      	LD   R30,X+
0002fc 91fd      	LD   R31,X+
0002fd 9631      	ADIW R30,1
0002fe 93fe      	ST   -X,R31
0002ff 93ee      	ST   -X,R30
                 _0x2000014:
000300 c006      	RJMP _0x2000015
                 _0x2000010:
000301 81aa      	LDD  R26,Y+2
000302 81bb      	LDD  R27,Y+2+1
000303 efef      	LDI  R30,LOW(65535)
000304 efff      	LDI  R31,HIGH(65535)
000305 93ed      	ST   X+,R30
000306 93fc      	ST   X,R31
                 _0x2000015:
000307 8119      	LDD  R17,Y+1
000308 8108      	LDD  R16,Y+0
000309 9625      	ADIW R28,5
00030a 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00030b 93ba      	ST   -Y,R27
00030c 93aa      	ST   -Y,R26
00030d 9726      	SBIW R28,6
00030e 940e 0719 	CALL __SAVELOCR6
000310 e010      	LDI  R17,0
000311 85ac      	LDD  R26,Y+12
000312 85bd      	LDD  R27,Y+12+1
000313 e0e0      	LDI  R30,LOW(0)
000314 e0f0      	LDI  R31,HIGH(0)
000315 93ed      	ST   X+,R30
000316 93fc      	ST   X,R31
                 _0x2000016:
000317 89ea      	LDD  R30,Y+18
000318 89fb      	LDD  R31,Y+18+1
000319 9631      	ADIW R30,1
00031a 8bea      	STD  Y+18,R30
00031b 8bfb      	STD  Y+18+1,R31
00031c 9731      	SBIW R30,1
00031d 91e4      	LPM  R30,Z
00031e 2f2e      	MOV  R18,R30
00031f 30e0      	CPI  R30,0
000320 f409      	BRNE PC+2
000321 c115      	RJMP _0x2000018
000322 2fe1      	MOV  R30,R17
000323 30e0      	CPI  R30,0
000324 f439      	BRNE _0x200001C
000325 3225      	CPI  R18,37
000326 f411      	BRNE _0x200001D
000327 e011      	LDI  R17,LOW(1)
000328 c002      	RJMP _0x200001E
                 _0x200001D:
000329 940e 056b 	CALL SUBOPT_0x9
                 _0x200001E:
00032b c10a      	RJMP _0x200001B
                 _0x200001C:
00032c 30e1      	CPI  R30,LOW(0x1)
00032d f4a9      	BRNE _0x200001F
00032e 3225      	CPI  R18,37
00032f f419      	BRNE _0x2000020
000330 940e 056b 	CALL SUBOPT_0x9
000332 c102      	RJMP _0x20000CC
                 _0x2000020:
000333 e012      	LDI  R17,LOW(2)
000334 e040      	LDI  R20,LOW(0)
000335 e000      	LDI  R16,LOW(0)
000336 322d      	CPI  R18,45
000337 f411      	BRNE _0x2000021
000338 e001      	LDI  R16,LOW(1)
000339 c0fc      	RJMP _0x200001B
                 _0x2000021:
00033a 322b      	CPI  R18,43
00033b f411      	BRNE _0x2000022
00033c e24b      	LDI  R20,LOW(43)
00033d c0f8      	RJMP _0x200001B
                 _0x2000022:
00033e 3220      	CPI  R18,32
00033f f411      	BRNE _0x2000023
000340 e240      	LDI  R20,LOW(32)
000341 c0f4      	RJMP _0x200001B
                 _0x2000023:
000342 c002      	RJMP _0x2000024
                 _0x200001F:
000343 30e2      	CPI  R30,LOW(0x2)
000344 f439      	BRNE _0x2000025
                 _0x2000024:
000345 e050      	LDI  R21,LOW(0)
000346 e013      	LDI  R17,LOW(3)
000347 3320      	CPI  R18,48
000348 f411      	BRNE _0x2000026
000349 6800      	ORI  R16,LOW(128)
00034a c0eb      	RJMP _0x200001B
                 _0x2000026:
00034b c003      	RJMP _0x2000027
                 _0x2000025:
00034c 30e3      	CPI  R30,LOW(0x3)
00034d f009      	BREQ PC+2
00034e c0e7      	RJMP _0x200001B
                 _0x2000027:
00034f 3320      	CPI  R18,48
000350 f010      	BRLO _0x200002A
000351 332a      	CPI  R18,58
000352 f008      	BRLO _0x200002B
                 _0x200002A:
000353 c007      	RJMP _0x2000029
                 _0x200002B:
000354 e0aa      	LDI  R26,LOW(10)
000355 9f5a      	MUL  R21,R26
000356 2d50      	MOV  R21,R0
000357 2fe2      	MOV  R30,R18
000358 53e0      	SUBI R30,LOW(48)
000359 0f5e      	ADD  R21,R30
00035a c0db      	RJMP _0x200001B
                 _0x2000029:
00035b 2fe2      	MOV  R30,R18
00035c 36e3      	CPI  R30,LOW(0x63)
00035d f449      	BRNE _0x200002F
00035e 940e 0572 	CALL SUBOPT_0xA
000360 89e8      	LDD  R30,Y+16
000361 89f9      	LDD  R31,Y+16+1
000362 81a4      	LDD  R26,Z+4
000363 93aa      	ST   -Y,R26
000364 940e 0578 	CALL SUBOPT_0xB
000366 c0ce      	RJMP _0x2000030
                 _0x200002F:
000367 37e3      	CPI  R30,LOW(0x73)
000368 f441      	BRNE _0x2000032
000369 940e 0572 	CALL SUBOPT_0xA
00036b 940e 057e 	CALL SUBOPT_0xC
00036d 940e 0500 	CALL _strlen
00036f 2f1e      	MOV  R17,R30
000370 c00a      	RJMP _0x2000033
                 _0x2000032:
000371 37e0      	CPI  R30,LOW(0x70)
000372 f461      	BRNE _0x2000035
000373 940e 0572 	CALL SUBOPT_0xA
000375 940e 057e 	CALL SUBOPT_0xC
000377 940e 050c 	CALL _strlenf
000379 2f1e      	MOV  R17,R30
00037a 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00037b 6002      	ORI  R16,LOW(2)
00037c 770f      	ANDI R16,LOW(127)
00037d e030      	LDI  R19,LOW(0)
00037e c034      	RJMP _0x2000036
                 _0x2000035:
00037f 36e4      	CPI  R30,LOW(0x64)
000380 f011      	BREQ _0x2000039
000381 36e9      	CPI  R30,LOW(0x69)
000382 f411      	BRNE _0x200003A
                 _0x2000039:
000383 6004      	ORI  R16,LOW(4)
000384 c002      	RJMP _0x200003B
                 _0x200003A:
000385 37e5      	CPI  R30,LOW(0x75)
000386 f431      	BRNE _0x200003C
                 _0x200003B:
000387 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000388 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000389 83ee      	STD  Y+6,R30
00038a 83ff      	STD  Y+6+1,R31
00038b e015      	LDI  R17,LOW(5)
00038c c00c      	RJMP _0x200003D
                 _0x200003C:
00038d 35e8      	CPI  R30,LOW(0x58)
00038e f411      	BRNE _0x200003F
00038f 6008      	ORI  R16,LOW(8)
000390 c003      	RJMP _0x2000040
                 _0x200003F:
000391 37e8      	CPI  R30,LOW(0x78)
000392 f009      	BREQ PC+2
000393 c0a1      	RJMP _0x2000071
                 _0x2000040:
000394 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000395 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000396 83ee      	STD  Y+6,R30
000397 83ff      	STD  Y+6+1,R31
000398 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000399 ff02      	SBRS R16,2
00039a c014      	RJMP _0x2000042
00039b 940e 0572 	CALL SUBOPT_0xA
00039d 940e 0588 	CALL SUBOPT_0xD
00039f 85ab      	LDD  R26,Y+11
0003a0 23aa      	TST  R26
0003a1 f43a      	BRPL _0x2000043
0003a2 85ea      	LDD  R30,Y+10
0003a3 85fb      	LDD  R31,Y+10+1
0003a4 940e 06da 	CALL __ANEGW1
0003a6 87ea      	STD  Y+10,R30
0003a7 87fb      	STD  Y+10+1,R31
0003a8 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0003a9 3040      	CPI  R20,0
0003aa f011      	BREQ _0x2000044
0003ab 5f1f      	SUBI R17,-LOW(1)
0003ac c001      	RJMP _0x2000045
                 _0x2000044:
0003ad 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0003ae c004      	RJMP _0x2000046
                 _0x2000042:
0003af 940e 0572 	CALL SUBOPT_0xA
0003b1 940e 0588 	CALL SUBOPT_0xD
                 _0x2000046:
                 _0x2000036:
0003b3 fd00      	SBRC R16,0
0003b4 c011      	RJMP _0x2000047
                 _0x2000048:
0003b5 1715      	CP   R17,R21
0003b6 f478      	BRSH _0x200004A
0003b7 ff07      	SBRS R16,7
0003b8 c008      	RJMP _0x200004B
0003b9 ff02      	SBRS R16,2
0003ba c004      	RJMP _0x200004C
0003bb 7f0b      	ANDI R16,LOW(251)
0003bc 2f24      	MOV  R18,R20
0003bd 5011      	SUBI R17,LOW(1)
0003be c001      	RJMP _0x200004D
                 _0x200004C:
0003bf e320      	LDI  R18,LOW(48)
                 _0x200004D:
0003c0 c001      	RJMP _0x200004E
                 _0x200004B:
0003c1 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0003c2 940e 056b 	CALL SUBOPT_0x9
0003c4 5051      	SUBI R21,LOW(1)
0003c5 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0003c6 2f31      	MOV  R19,R17
0003c7 ff01      	SBRS R16,1
0003c8 c017      	RJMP _0x200004F
                 _0x2000050:
0003c9 3030      	CPI  R19,0
0003ca f0a1      	BREQ _0x2000052
0003cb ff03      	SBRS R16,3
0003cc c006      	RJMP _0x2000053
0003cd 81ee      	LDD  R30,Y+6
0003ce 81ff      	LDD  R31,Y+6+1
0003cf 9125      	LPM  R18,Z+
0003d0 83ee      	STD  Y+6,R30
0003d1 83ff      	STD  Y+6+1,R31
0003d2 c005      	RJMP _0x2000054
                 _0x2000053:
0003d3 81ae      	LDD  R26,Y+6
0003d4 81bf      	LDD  R27,Y+6+1
0003d5 912d      	LD   R18,X+
0003d6 83ae      	STD  Y+6,R26
0003d7 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0003d8 940e 056b 	CALL SUBOPT_0x9
0003da 3050      	CPI  R21,0
0003db f009      	BREQ _0x2000055
0003dc 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0003dd 5031      	SUBI R19,LOW(1)
0003de cfea      	RJMP _0x2000050
                 _0x2000052:
0003df c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0003e0 e320      	LDI  R18,LOW(48)
0003e1 81ee      	LDD  R30,Y+6
0003e2 81ff      	LDD  R31,Y+6+1
0003e3 940e 0710 	CALL __GETW1PF
0003e5 87e8      	STD  Y+8,R30
0003e6 87f9      	STD  Y+8+1,R31
0003e7 81ee      	LDD  R30,Y+6
0003e8 81ff      	LDD  R31,Y+6+1
0003e9 9632      	ADIW R30,2
0003ea 83ee      	STD  Y+6,R30
0003eb 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0003ec 85e8      	LDD  R30,Y+8
0003ed 85f9      	LDD  R31,Y+8+1
0003ee 85aa      	LDD  R26,Y+10
0003ef 85bb      	LDD  R27,Y+10+1
0003f0 17ae      	CP   R26,R30
0003f1 07bf      	CPC  R27,R31
0003f2 f050      	BRLO _0x200005C
0003f3 5f2f      	SUBI R18,-LOW(1)
0003f4 85a8      	LDD  R26,Y+8
0003f5 85b9      	LDD  R27,Y+8+1
0003f6 85ea      	LDD  R30,Y+10
0003f7 85fb      	LDD  R31,Y+10+1
0003f8 1bea      	SUB  R30,R26
0003f9 0bfb      	SBC  R31,R27
0003fa 87ea      	STD  Y+10,R30
0003fb 87fb      	STD  Y+10+1,R31
0003fc cfef      	RJMP _0x200005A
                 _0x200005C:
0003fd 332a      	CPI  R18,58
0003fe f028      	BRLO _0x200005D
0003ff ff03      	SBRS R16,3
000400 c002      	RJMP _0x200005E
000401 5f29      	SUBI R18,-LOW(7)
000402 c001      	RJMP _0x200005F
                 _0x200005E:
000403 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000404 fd04      	SBRC R16,4
000405 c01a      	RJMP _0x2000061
000406 3321      	CPI  R18,49
000407 f420      	BRSH _0x2000063
000408 85a8      	LDD  R26,Y+8
000409 85b9      	LDD  R27,Y+8+1
00040a 9711      	SBIW R26,1
00040b f409      	BRNE _0x2000062
                 _0x2000063:
00040c c009      	RJMP _0x20000CD
                 _0x2000062:
00040d 1753      	CP   R21,R19
00040e f010      	BRLO _0x2000067
00040f ff00      	SBRS R16,0
000410 c001      	RJMP _0x2000068
                 _0x2000067:
000411 c013      	RJMP _0x2000066
                 _0x2000068:
000412 e220      	LDI  R18,LOW(32)
000413 ff07      	SBRS R16,7
000414 c00b      	RJMP _0x2000069
000415 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000416 6100      	ORI  R16,LOW(16)
000417 ff02      	SBRS R16,2
000418 c007      	RJMP _0x200006A
000419 7f0b      	ANDI R16,LOW(251)
00041a 934a      	ST   -Y,R20
00041b 940e 0578 	CALL SUBOPT_0xB
00041d 3050      	CPI  R21,0
00041e f009      	BREQ _0x200006B
00041f 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000420 940e 056b 	CALL SUBOPT_0x9
000422 3050      	CPI  R21,0
000423 f009      	BREQ _0x200006C
000424 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000425 5031      	SUBI R19,LOW(1)
000426 85a8      	LDD  R26,Y+8
000427 85b9      	LDD  R27,Y+8+1
000428 9712      	SBIW R26,2
000429 f008      	BRLO _0x2000059
00042a cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00042b ff00      	SBRS R16,0
00042c c008      	RJMP _0x200006D
                 _0x200006E:
00042d 3050      	CPI  R21,0
00042e f031      	BREQ _0x2000070
00042f 5051      	SUBI R21,LOW(1)
000430 e2e0      	LDI  R30,LOW(32)
000431 93ea      	ST   -Y,R30
000432 940e 0578 	CALL SUBOPT_0xB
000434 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000435 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000436 cee0      	RJMP _0x2000016
                 _0x2000018:
000437 85ac      	LDD  R26,Y+12
000438 85bd      	LDD  R27,Y+12+1
000439 940e 070c 	CALL __GETW1P
00043b 940e 0720 	CALL __LOADLOCR6
00043d 9664      	ADIW R28,20
00043e 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00043f 92ff      	PUSH R15
000440 2ef8      	MOV  R15,R24
000441 9726      	SBIW R28,6
000442 940e 071b 	CALL __SAVELOCR4
000444 940e 0590 	CALL SUBOPT_0xE
000446 9730      	SBIW R30,0
000447 f419      	BRNE _0x2000072
000448 efef      	LDI  R30,LOW(65535)
000449 efff      	LDI  R31,HIGH(65535)
00044a c023      	RJMP _0x2080003
                 _0x2000072:
00044b 01de      	MOVW R26,R28
00044c 9616      	ADIW R26,6
00044d 940e 06d6 	CALL __ADDW2R15
00044f 018d      	MOVW R16,R26
000450 940e 0590 	CALL SUBOPT_0xE
000452 83ee      	STD  Y+6,R30
000453 83ff      	STD  Y+6+1,R31
000454 e0e0      	LDI  R30,LOW(0)
000455 87e8      	STD  Y+8,R30
000456 87e9      	STD  Y+8+1,R30
000457 01de      	MOVW R26,R28
000458 961a      	ADIW R26,10
000459 940e 06d6 	CALL __ADDW2R15
00045b 940e 070c 	CALL __GETW1P
00045d 93fa      	ST   -Y,R31
00045e 93ea      	ST   -Y,R30
00045f 931a      	ST   -Y,R17
000460 930a      	ST   -Y,R16
000461 eceb      	LDI  R30,LOW(_put_buff_G100)
000462 e0f2      	LDI  R31,HIGH(_put_buff_G100)
000463 93fa      	ST   -Y,R31
000464 93ea      	ST   -Y,R30
000465 01de      	MOVW R26,R28
000466 961a      	ADIW R26,10
000467 dea3      	RCALL __print_G100
000468 019f      	MOVW R18,R30
000469 81ae      	LDD  R26,Y+6
00046a 81bf      	LDD  R27,Y+6+1
00046b e0e0      	LDI  R30,LOW(0)
00046c 93ec      	ST   X,R30
00046d 01f9      	MOVW R30,R18
                 _0x2080003:
00046e 940e 0722 	CALL __LOADLOCR4
000470 962a      	ADIW R28,10
000471 90ff      	POP  R15
000472 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000473 93aa      	ST   -Y,R26
000474 b3e8      	IN   R30,0x18
000475 70ef      	ANDI R30,LOW(0xF)
000476 2fae      	MOV  R26,R30
000477 81e8      	LD   R30,Y
000478 7fe0      	ANDI R30,LOW(0xF0)
000479 2bea      	OR   R30,R26
00047a bbe8      	OUT  0x18,R30
                +
00047b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00047c 958a     +DEC R24
00047d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00047e 9ac2      	SBI  0x18,2
                +
00047f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000480 958a     +DEC R24
000481 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000482 98c2      	CBI  0x18,2
                +
000483 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000484 958a     +DEC R24
000485 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000486 c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000487 93aa      	ST   -Y,R26
000488 81a8      	LD   R26,Y
000489 dfe9      	RCALL __lcd_write_nibble_G101
00048a 81e8          ld    r30,y
00048b 95e2          swap  r30
00048c 83e8          st    y,r30
00048d 81a8      	LD   R26,Y
00048e dfe4      	RCALL __lcd_write_nibble_G101
                +
00048f e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000490 958a     +DEC R24
000491 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000492 c06b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000493 93aa      	ST   -Y,R26
000494 81e8      	LD   R30,Y
000495 e0f0      	LDI  R31,0
000496 58e0      	SUBI R30,LOW(-__base_y_G101)
000497 4ffd      	SBCI R31,HIGH(-__base_y_G101)
000498 81e0      	LD   R30,Z
000499 81a9      	LDD  R26,Y+1
00049a 0fae      	ADD  R26,R30
00049b dfeb      	RCALL __lcd_write_data
00049c 8059      	LDD  R5,Y+1
00049d 8048      	LDD  R4,Y+0
                 _0x2080002:
00049e 9622      	ADIW R28,2
00049f 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0004a0 e0a2      	LDI  R26,LOW(2)
0004a1 940e 0597 	CALL SUBOPT_0xF
0004a3 e0ac      	LDI  R26,LOW(12)
0004a4 dfe2      	RCALL __lcd_write_data
0004a5 e0a1      	LDI  R26,LOW(1)
0004a6 940e 0597 	CALL SUBOPT_0xF
0004a8 e0e0      	LDI  R30,LOW(0)
0004a9 2e4e      	MOV  R4,R30
0004aa 2e5e      	MOV  R5,R30
0004ab 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0004ac 93aa      	ST   -Y,R26
0004ad 81a8      	LD   R26,Y
0004ae 30aa      	CPI  R26,LOW(0xA)
0004af f011      	BREQ _0x2020005
0004b0 1457      	CP   R5,R7
0004b1 f048      	BRLO _0x2020004
                 _0x2020005:
0004b2 e0e0      	LDI  R30,LOW(0)
0004b3 93ea      	ST   -Y,R30
0004b4 9443      	INC  R4
0004b5 2da4      	MOV  R26,R4
0004b6 dfdc      	RCALL _lcd_gotoxy
0004b7 81a8      	LD   R26,Y
0004b8 30aa      	CPI  R26,LOW(0xA)
0004b9 f409      	BRNE _0x2020007
0004ba c043      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
0004bb 9453      	INC  R5
0004bc 9ac0      	SBI  0x18,0
0004bd 81a8      	LD   R26,Y
0004be dfc8      	RCALL __lcd_write_data
0004bf 98c0      	CBI  0x18,0
0004c0 c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0004c1 93ba      	ST   -Y,R27
0004c2 93aa      	ST   -Y,R26
0004c3 931a      	ST   -Y,R17
                 _0x2020008:
0004c4 81a9      	LDD  R26,Y+1
0004c5 81ba      	LDD  R27,Y+1+1
0004c6 91ed      	LD   R30,X+
0004c7 83a9      	STD  Y+1,R26
0004c8 83ba      	STD  Y+1+1,R27
0004c9 2f1e      	MOV  R17,R30
0004ca 30e0      	CPI  R30,0
0004cb f019      	BREQ _0x202000A
0004cc 2fa1      	MOV  R26,R17
0004cd dfde      	RCALL _lcd_putchar
0004ce cff5      	RJMP _0x2020008
                 _0x202000A:
0004cf 8118      	LDD  R17,Y+0
0004d0 9623      	ADIW R28,3
0004d1 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0004d2 93aa      	ST   -Y,R26
0004d3 b3e7      	IN   R30,0x17
0004d4 6fe0      	ORI  R30,LOW(0xF0)
0004d5 bbe7      	OUT  0x17,R30
0004d6 9aba      	SBI  0x17,2
0004d7 9ab8      	SBI  0x17,0
0004d8 9ab9      	SBI  0x17,1
0004d9 98c2      	CBI  0x18,2
0004da 98c0      	CBI  0x18,0
0004db 98c1      	CBI  0x18,1
0004dc 8078      	LDD  R7,Y+0
0004dd 81e8      	LD   R30,Y
0004de 58e0      	SUBI R30,-LOW(128)
                +
0004df 93e0 0282+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
0004e1 81e8      	LD   R30,Y
0004e2 54e0      	SUBI R30,-LOW(192)
                +
0004e3 93e0 0283+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
0004e5 e1a4      	LDI  R26,LOW(20)
0004e6 e0b0      	LDI  R27,0
0004e7 940e 05a5 	CALL _delay_ms
0004e9 940e 059d 	CALL SUBOPT_0x10
0004eb 940e 059d 	CALL SUBOPT_0x10
0004ed 940e 059d 	CALL SUBOPT_0x10
0004ef e2a0      	LDI  R26,LOW(32)
0004f0 df82      	RCALL __lcd_write_nibble_G101
                +
0004f1 ec88     +LDI R24 , LOW ( 200 )
0004f2 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004f3 9701     +SBIW R24 , 1
0004f4 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004f5 e2a8      	LDI  R26,LOW(40)
0004f6 df90      	RCALL __lcd_write_data
0004f7 e0a4      	LDI  R26,LOW(4)
0004f8 df8e      	RCALL __lcd_write_data
0004f9 e8a5      	LDI  R26,LOW(133)
0004fa df8c      	RCALL __lcd_write_data
0004fb e0a6      	LDI  R26,LOW(6)
0004fc df8a      	RCALL __lcd_write_data
0004fd dfa2      	RCALL _lcd_clear
                 _0x2080001:
0004fe 9621      	ADIW R28,1
0004ff 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000500 93ba      	ST   -Y,R27
000501 93aa      	ST   -Y,R26
000502 91a9          ld   r26,y+
000503 91b9          ld   r27,y+
000504 27ee          clr  r30
000505 27ff          clr  r31
                 strlen0:
000506 916d          ld   r22,x+
000507 2366          tst  r22
000508 f011          breq strlen1
000509 9631          adiw r30,1
00050a cffb          rjmp strlen0
                 strlen1:
00050b 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00050c 93ba      	ST   -Y,R27
00050d 93aa      	ST   -Y,R26
00050e 27aa          clr  r26
00050f 27bb          clr  r27
000510 91e9          ld   r30,y+
000511 91f9          ld   r31,y+
                 strlenf0:
000512 9005      	lpm  r0,z+
000513 2000          tst  r0
000514 f011          breq strlenf1
000515 9611          adiw r26,1
000516 cffb          rjmp strlenf0
                 strlenf1:
000517 01fd          movw r30,r26
000518 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _txt:
000260           	.BYTE 0x20
                 __base_y_G101:
000280           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
000519 93fa      	ST   -Y,R31
00051a 93ea      	ST   -Y,R30
00051b 81ec      	LDD  R30,Y+4
00051c 81fd      	LDD  R31,Y+4+1
00051d 940e 06e6 	CALL __CWD1
00051f 940e 0714 	CALL __PUTPARD1
000521 e084      	LDI  R24,4
000522 940e 043f 	CALL _sprintf
000524 9628      	ADIW R28,8
000525 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:60 WORDS
                 SUBOPT_0x1:
000526 e0e0      	LDI  R30,LOW(0)
000527 93ea      	ST   -Y,R30
000528 e0a0      	LDI  R26,LOW(0)
000529 940e 0493 	CALL _lcd_gotoxy
00052b e6a0      	LDI  R26,LOW(_txt)
00052c e0b2      	LDI  R27,HIGH(_txt)
00052d 940c 04c1 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x2:
00052f e6e0      	LDI  R30,LOW(_txt)
000530 e0f2      	LDI  R31,HIGH(_txt)
000531 93fa      	ST   -Y,R31
000532 93ea      	ST   -Y,R30
000533 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000534 93ba      	ST   -Y,R27
000535 93aa      	ST   -Y,R26
000536 81aa      	LDD  R26,Y+2
000537 81bb      	LDD  R27,Y+2+1
000538 e0e3      	LDI  R30,LOW(3)
000539 e0f0      	LDI  R31,HIGH(3)
00053a 940e 06fe 	CALL __MODW21
00053c 9730      	SBIW R30,0
00053d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x4:
00053e 93fa      	ST   -Y,R31
00053f 93ea      	ST   -Y,R30
000540 e080      	LDI  R24,0
000541 940e 043f 	CALL _sprintf
000543 9624      	ADIW R28,4
000544 cfe1      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
000545 81aa      	LDD  R26,Y+2
000546 81bb      	LDD  R27,Y+2+1
000547 e0e3      	LDI  R30,LOW(3)
000548 e0f0      	LDI  R31,HIGH(3)
000549 940e 06fe 	CALL __MODW21
00054b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00054c 81ac      	LDD  R26,Y+4
00054d 81bd      	LDD  R27,Y+4+1
00054e e0e2      	LDI  R30,LOW(2)
00054f e0f0      	LDI  R31,HIGH(2)
000550 940e 06fe 	CALL __MODW21
000552 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x7:
000553 93fa      	ST   -Y,R31
000554 93ea      	ST   -Y,R30
000555 81ee      	LDD  R30,Y+6
000556 81ff      	LDD  R31,Y+6+1
000557 940e 06e6 	CALL __CWD1
000559 940e 0714 	CALL __PUTPARD1
00055b 85e8      	LDD  R30,Y+8
00055c 85f9      	LDD  R31,Y+8+1
00055d 940e 06e6 	CALL __CWD1
00055f 940e 0714 	CALL __PUTPARD1
000561 e088      	LDI  R24,8
000562 940e 043f 	CALL _sprintf
000564 962c      	ADIW R28,12
000565 cfc0      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
000566 81ee      	LDD  R30,Y+6
000567 81ff      	LDD  R31,Y+6+1
000568 93fa      	ST   -Y,R31
000569 93ea      	ST   -Y,R30
00056a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x9:
00056b 932a      	ST   -Y,R18
00056c 85ad      	LDD  R26,Y+13
00056d 85be      	LDD  R27,Y+13+1
00056e 85ef      	LDD  R30,Y+15
00056f 89f8      	LDD  R31,Y+15+1
000570 9509      	ICALL
000571 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xA:
000572 89e8      	LDD  R30,Y+16
000573 89f9      	LDD  R31,Y+16+1
000574 9734      	SBIW R30,4
000575 8be8      	STD  Y+16,R30
000576 8bf9      	STD  Y+16+1,R31
000577 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xB:
000578 85ad      	LDD  R26,Y+13
000579 85be      	LDD  R27,Y+13+1
00057a 85ef      	LDD  R30,Y+15
00057b 89f8      	LDD  R31,Y+15+1
00057c 9509      	ICALL
00057d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
00057e 89a8      	LDD  R26,Y+16
00057f 89b9      	LDD  R27,Y+16+1
000580 9614      	ADIW R26,4
000581 940e 070c 	CALL __GETW1P
000583 83ee      	STD  Y+6,R30
000584 83ff      	STD  Y+6+1,R31
000585 81ae      	LDD  R26,Y+6
000586 81bf      	LDD  R27,Y+6+1
000587 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
000588 89a8      	LDD  R26,Y+16
000589 89b9      	LDD  R27,Y+16+1
00058a 9614      	ADIW R26,4
00058b 940e 070c 	CALL __GETW1P
00058d 87ea      	STD  Y+10,R30
00058e 87fb      	STD  Y+10+1,R31
00058f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000590 01de      	MOVW R26,R28
000591 961c      	ADIW R26,12
000592 940e 06d6 	CALL __ADDW2R15
000594 940e 070c 	CALL __GETW1P
000596 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
000597 940e 0487 	CALL __lcd_write_data
000599 e0a3      	LDI  R26,LOW(3)
00059a e0b0      	LDI  R27,0
00059b 940c 05a5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x10:
00059d e3a0      	LDI  R26,LOW(48)
00059e 940e 0473 	CALL __lcd_write_nibble_G101
                +
0005a0 ec88     +LDI R24 , LOW ( 200 )
0005a1 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0005a2 9701     +SBIW R24 , 1
0005a3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0005a4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0005a5 9610      	adiw r26,0
0005a6 f039      	breq __delay_ms1
                 __delay_ms0:
0005a7 95a8      	wdr
                +
0005a8 ed80     +LDI R24 , LOW ( 0x7D0 )
0005a9 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0005aa 9701     +SBIW R24 , 1
0005ab f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0005ac 9711      	sbiw r26,1
0005ad f7c9      	brne __delay_ms0
                 __delay_ms1:
0005ae 9508      	ret
                 
                 __ROUND_REPACK:
0005af 2355      	TST  R21
0005b0 f442      	BRPL __REPACK
0005b1 3850      	CPI  R21,0x80
0005b2 f411      	BRNE __ROUND_REPACK0
0005b3 ffe0      	SBRS R30,0
0005b4 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0005b5 9631      	ADIW R30,1
0005b6 1f69      	ADC  R22,R25
0005b7 1f79      	ADC  R23,R25
0005b8 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0005b9 e850      	LDI  R21,0x80
0005ba 2757      	EOR  R21,R23
0005bb f411      	BRNE __REPACK0
0005bc 935f      	PUSH R21
0005bd c073      	RJMP __ZERORES
                 __REPACK0:
0005be 3f5f      	CPI  R21,0xFF
0005bf f031      	BREQ __REPACK1
0005c0 0f66      	LSL  R22
0005c1 0c00      	LSL  R0
0005c2 9557      	ROR  R21
0005c3 9567      	ROR  R22
0005c4 2f75      	MOV  R23,R21
0005c5 9508      	RET
                 __REPACK1:
0005c6 935f      	PUSH R21
0005c7 2000      	TST  R0
0005c8 f00a      	BRMI __REPACK2
0005c9 c073      	RJMP __MAXRES
                 __REPACK2:
0005ca c06c      	RJMP __MINRES
                 
                 __UNPACK:
0005cb e850      	LDI  R21,0x80
0005cc 2e19      	MOV  R1,R25
0005cd 2215      	AND  R1,R21
0005ce 0f88      	LSL  R24
0005cf 1f99      	ROL  R25
0005d0 2795      	EOR  R25,R21
0005d1 0f55      	LSL  R21
0005d2 9587      	ROR  R24
                 
                 __UNPACK1:
0005d3 e850      	LDI  R21,0x80
0005d4 2e07      	MOV  R0,R23
0005d5 2205      	AND  R0,R21
0005d6 0f66      	LSL  R22
0005d7 1f77      	ROL  R23
0005d8 2775      	EOR  R23,R21
0005d9 0f55      	LSL  R21
0005da 9567      	ROR  R22
0005db 9508      	RET
                 
                 __CFD1U:
0005dc 9468      	SET
0005dd c001      	RJMP __CFD1U0
                 __CFD1:
0005de 94e8      	CLT
                 __CFD1U0:
0005df 935f      	PUSH R21
0005e0 dff2      	RCALL __UNPACK1
0005e1 3870      	CPI  R23,0x80
0005e2 f018      	BRLO __CFD10
0005e3 3f7f      	CPI  R23,0xFF
0005e4 f408      	BRCC __CFD10
0005e5 c04b      	RJMP __ZERORES
                 __CFD10:
0005e6 e156      	LDI  R21,22
0005e7 1b57      	SUB  R21,R23
0005e8 f4aa      	BRPL __CFD11
0005e9 9551      	NEG  R21
0005ea 3058      	CPI  R21,8
0005eb f40e      	BRTC __CFD19
0005ec 3059      	CPI  R21,9
                 __CFD19:
0005ed f030      	BRLO __CFD17
0005ee efef      	SER  R30
0005ef efff      	SER  R31
0005f0 ef6f      	SER  R22
0005f1 e77f      	LDI  R23,0x7F
0005f2 f977      	BLD  R23,7
0005f3 c01a      	RJMP __CFD15
                 __CFD17:
0005f4 2777      	CLR  R23
0005f5 2355      	TST  R21
0005f6 f0b9      	BREQ __CFD15
                 __CFD18:
0005f7 0fee      	LSL  R30
0005f8 1fff      	ROL  R31
0005f9 1f66      	ROL  R22
0005fa 1f77      	ROL  R23
0005fb 955a      	DEC  R21
0005fc f7d1      	BRNE __CFD18
0005fd c010      	RJMP __CFD15
                 __CFD11:
0005fe 2777      	CLR  R23
                 __CFD12:
0005ff 3058      	CPI  R21,8
000600 f028      	BRLO __CFD13
000601 2fef      	MOV  R30,R31
000602 2ff6      	MOV  R31,R22
000603 2f67      	MOV  R22,R23
000604 5058      	SUBI R21,8
000605 cff9      	RJMP __CFD12
                 __CFD13:
000606 2355      	TST  R21
000607 f031      	BREQ __CFD15
                 __CFD14:
000608 9576      	LSR  R23
000609 9567      	ROR  R22
00060a 95f7      	ROR  R31
00060b 95e7      	ROR  R30
00060c 955a      	DEC  R21
00060d f7d1      	BRNE __CFD14
                 __CFD15:
00060e 2000      	TST  R0
00060f f40a      	BRPL __CFD16
000610 d0cd      	RCALL __ANEGD1
                 __CFD16:
000611 915f      	POP  R21
000612 9508      	RET
                 
                 __CDF1U:
000613 9468      	SET
000614 c001      	RJMP __CDF1U0
                 __CDF1:
000615 94e8      	CLT
                 __CDF1U0:
000616 9730      	SBIW R30,0
000617 4060      	SBCI R22,0
000618 4070      	SBCI R23,0
000619 f0b1      	BREQ __CDF10
00061a 2400      	CLR  R0
00061b f026      	BRTS __CDF11
00061c 2377      	TST  R23
00061d f412      	BRPL __CDF11
00061e 9400      	COM  R0
00061f d0be      	RCALL __ANEGD1
                 __CDF11:
000620 2e17      	MOV  R1,R23
000621 e17e      	LDI  R23,30
000622 2011      	TST  R1
                 __CDF12:
000623 f032      	BRMI __CDF13
000624 957a      	DEC  R23
000625 0fee      	LSL  R30
000626 1fff      	ROL  R31
000627 1f66      	ROL  R22
000628 1c11      	ROL  R1
000629 cff9      	RJMP __CDF12
                 __CDF13:
00062a 2fef      	MOV  R30,R31
00062b 2ff6      	MOV  R31,R22
00062c 2d61      	MOV  R22,R1
00062d 935f      	PUSH R21
00062e df8a      	RCALL __REPACK
00062f 915f      	POP  R21
                 __CDF10:
000630 9508      	RET
                 
                 __ZERORES:
000631 27ee      	CLR  R30
000632 27ff      	CLR  R31
000633 2766      	CLR  R22
000634 2777      	CLR  R23
000635 915f      	POP  R21
000636 9508      	RET
                 
                 __MINRES:
000637 efef      	SER  R30
000638 efff      	SER  R31
000639 e76f      	LDI  R22,0x7F
00063a ef7f      	SER  R23
00063b 915f      	POP  R21
00063c 9508      	RET
                 
                 __MAXRES:
00063d efef      	SER  R30
00063e efff      	SER  R31
00063f e76f      	LDI  R22,0x7F
000640 e77f      	LDI  R23,0x7F
000641 915f      	POP  R21
000642 9508      	RET
                 
                 __MULF12:
000643 935f      	PUSH R21
000644 df86      	RCALL __UNPACK
000645 3870      	CPI  R23,0x80
000646 f351      	BREQ __ZERORES
000647 3890      	CPI  R25,0x80
000648 f341      	BREQ __ZERORES
000649 2401      	EOR  R0,R1
00064a 9408      	SEC
00064b 1f79      	ADC  R23,R25
00064c f423      	BRVC __MULF124
00064d f31c      	BRLT __ZERORES
                 __MULF125:
00064e 2000      	TST  R0
00064f f33a      	BRMI __MINRES
000650 cfec      	RJMP __MAXRES
                 __MULF124:
000651 920f      	PUSH R0
000652 931f      	PUSH R17
000653 932f      	PUSH R18
000654 933f      	PUSH R19
000655 934f      	PUSH R20
000656 2711      	CLR  R17
000657 2722      	CLR  R18
000658 2799      	CLR  R25
000659 9f68      	MUL  R22,R24
00065a 01a0      	MOVW R20,R0
00065b 9f8f      	MUL  R24,R31
00065c 2d30      	MOV  R19,R0
00065d 0d41      	ADD  R20,R1
00065e 1f59      	ADC  R21,R25
00065f 9f6b      	MUL  R22,R27
000660 0d30      	ADD  R19,R0
000661 1d41      	ADC  R20,R1
000662 1f59      	ADC  R21,R25
000663 9f8e      	MUL  R24,R30
000664 d027      	RCALL __MULF126
000665 9fbf      	MUL  R27,R31
000666 d025      	RCALL __MULF126
000667 9f6a      	MUL  R22,R26
000668 d023      	RCALL __MULF126
000669 9fbe      	MUL  R27,R30
00066a d01d      	RCALL __MULF127
00066b 9faf      	MUL  R26,R31
00066c d01b      	RCALL __MULF127
00066d 9fae      	MUL  R26,R30
00066e 0d11      	ADD  R17,R1
00066f 1f29      	ADC  R18,R25
000670 1f39      	ADC  R19,R25
000671 1f49      	ADC  R20,R25
000672 1f59      	ADC  R21,R25
000673 2fe3      	MOV  R30,R19
000674 2ff4      	MOV  R31,R20
000675 2f65      	MOV  R22,R21
000676 2f52      	MOV  R21,R18
000677 914f      	POP  R20
000678 913f      	POP  R19
000679 912f      	POP  R18
00067a 911f      	POP  R17
00067b 900f      	POP  R0
00067c 2366      	TST  R22
00067d f02a      	BRMI __MULF122
00067e 0f55      	LSL  R21
00067f 1fee      	ROL  R30
000680 1fff      	ROL  R31
000681 1f66      	ROL  R22
000682 c002      	RJMP __MULF123
                 __MULF122:
000683 9573      	INC  R23
000684 f24b      	BRVS __MULF125
                 __MULF123:
000685 df29      	RCALL __ROUND_REPACK
000686 915f      	POP  R21
000687 9508      	RET
                 
                 __MULF127:
000688 0d10      	ADD  R17,R0
000689 1d21      	ADC  R18,R1
00068a 1f39      	ADC  R19,R25
00068b c002      	RJMP __MULF128
                 __MULF126:
00068c 0d20      	ADD  R18,R0
00068d 1d31      	ADC  R19,R1
                 __MULF128:
00068e 1f49      	ADC  R20,R25
00068f 1f59      	ADC  R21,R25
000690 9508      	RET
                 
                 __DIVF21:
000691 935f      	PUSH R21
000692 df38      	RCALL __UNPACK
000693 3870      	CPI  R23,0x80
000694 f421      	BRNE __DIVF210
000695 2011      	TST  R1
                 __DIVF211:
000696 f40a      	BRPL __DIVF219
000697 cf9f      	RJMP __MINRES
                 __DIVF219:
000698 cfa4      	RJMP __MAXRES
                 __DIVF210:
000699 3890      	CPI  R25,0x80
00069a f409      	BRNE __DIVF218
                 __DIVF217:
00069b cf95      	RJMP __ZERORES
                 __DIVF218:
00069c 2401      	EOR  R0,R1
00069d 9408      	SEC
00069e 0b97      	SBC  R25,R23
00069f f41b      	BRVC __DIVF216
0006a0 f3d4      	BRLT __DIVF217
0006a1 2000      	TST  R0
0006a2 cff3      	RJMP __DIVF211
                 __DIVF216:
0006a3 2f79      	MOV  R23,R25
0006a4 931f      	PUSH R17
0006a5 932f      	PUSH R18
0006a6 933f      	PUSH R19
0006a7 934f      	PUSH R20
0006a8 2411      	CLR  R1
0006a9 2711      	CLR  R17
0006aa 2722      	CLR  R18
0006ab 2733      	CLR  R19
0006ac 2744      	CLR  R20
0006ad 2755      	CLR  R21
0006ae e290      	LDI  R25,32
                 __DIVF212:
0006af 17ae      	CP   R26,R30
0006b0 07bf      	CPC  R27,R31
0006b1 0786      	CPC  R24,R22
0006b2 0741      	CPC  R20,R17
0006b3 f030      	BRLO __DIVF213
0006b4 1bae      	SUB  R26,R30
0006b5 0bbf      	SBC  R27,R31
0006b6 0b86      	SBC  R24,R22
0006b7 0b41      	SBC  R20,R17
0006b8 9408      	SEC
0006b9 c001      	RJMP __DIVF214
                 __DIVF213:
0006ba 9488      	CLC
                 __DIVF214:
0006bb 1f55      	ROL  R21
0006bc 1f22      	ROL  R18
0006bd 1f33      	ROL  R19
0006be 1c11      	ROL  R1
0006bf 1faa      	ROL  R26
0006c0 1fbb      	ROL  R27
0006c1 1f88      	ROL  R24
0006c2 1f44      	ROL  R20
0006c3 959a      	DEC  R25
0006c4 f751      	BRNE __DIVF212
0006c5 01f9      	MOVW R30,R18
0006c6 2d61      	MOV  R22,R1
0006c7 914f      	POP  R20
0006c8 913f      	POP  R19
0006c9 912f      	POP  R18
0006ca 911f      	POP  R17
0006cb 2366      	TST  R22
0006cc f032      	BRMI __DIVF215
0006cd 0f55      	LSL  R21
0006ce 1fee      	ROL  R30
0006cf 1fff      	ROL  R31
0006d0 1f66      	ROL  R22
0006d1 957a      	DEC  R23
0006d2 f243      	BRVS __DIVF217
                 __DIVF215:
0006d3 dedb      	RCALL __ROUND_REPACK
0006d4 915f      	POP  R21
0006d5 9508      	RET
                 
                 __ADDW2R15:
0006d6 2400      	CLR  R0
0006d7 0daf      	ADD  R26,R15
0006d8 1db0      	ADC  R27,R0
0006d9 9508      	RET
                 
                 __ANEGW1:
0006da 95f1      	NEG  R31
0006db 95e1      	NEG  R30
0006dc 40f0      	SBCI R31,0
0006dd 9508      	RET
                 
                 __ANEGD1:
0006de 95f0      	COM  R31
0006df 9560      	COM  R22
0006e0 9570      	COM  R23
0006e1 95e1      	NEG  R30
0006e2 4fff      	SBCI R31,-1
0006e3 4f6f      	SBCI R22,-1
0006e4 4f7f      	SBCI R23,-1
0006e5 9508      	RET
                 
                 __CWD1:
0006e6 2f6f      	MOV  R22,R31
0006e7 0f66      	ADD  R22,R22
0006e8 0b66      	SBC  R22,R22
0006e9 2f76      	MOV  R23,R22
0006ea 9508      	RET
                 
                 __DIVW21U:
0006eb 2400      	CLR  R0
0006ec 2411      	CLR  R1
0006ed e190      	LDI  R25,16
                 __DIVW21U1:
0006ee 0faa      	LSL  R26
0006ef 1fbb      	ROL  R27
0006f0 1c00      	ROL  R0
0006f1 1c11      	ROL  R1
0006f2 1a0e      	SUB  R0,R30
0006f3 0a1f      	SBC  R1,R31
0006f4 f418      	BRCC __DIVW21U2
0006f5 0e0e      	ADD  R0,R30
0006f6 1e1f      	ADC  R1,R31
0006f7 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0006f8 60a1      	SBR  R26,1
                 __DIVW21U3:
0006f9 959a      	DEC  R25
0006fa f799      	BRNE __DIVW21U1
0006fb 01fd      	MOVW R30,R26
0006fc 01d0      	MOVW R26,R0
0006fd 9508      	RET
                 
                 __MODW21:
0006fe 94e8      	CLT
0006ff ffb7      	SBRS R27,7
000700 c004      	RJMP __MODW211
000701 95a0      	COM  R26
000702 95b0      	COM  R27
000703 9611      	ADIW R26,1
000704 9468      	SET
                 __MODW211:
000705 fdf7      	SBRC R31,7
000706 dfd3      	RCALL __ANEGW1
000707 dfe3      	RCALL __DIVW21U
000708 01fd      	MOVW R30,R26
000709 f40e      	BRTC __MODW212
00070a dfcf      	RCALL __ANEGW1
                 __MODW212:
00070b 9508      	RET
                 
                 __GETW1P:
00070c 91ed      	LD   R30,X+
00070d 91fc      	LD   R31,X
00070e 9711      	SBIW R26,1
00070f 9508      	RET
                 
                 __GETW1PF:
000710 9005      	LPM  R0,Z+
000711 91f4      	LPM  R31,Z
000712 2de0      	MOV  R30,R0
000713 9508      	RET
                 
                 __PUTPARD1:
000714 937a      	ST   -Y,R23
000715 936a      	ST   -Y,R22
000716 93fa      	ST   -Y,R31
000717 93ea      	ST   -Y,R30
000718 9508      	RET
                 
                 __SAVELOCR6:
000719 935a      	ST   -Y,R21
                 __SAVELOCR5:
00071a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00071b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00071c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00071d 931a      	ST   -Y,R17
00071e 930a      	ST   -Y,R16
00071f 9508      	RET
                 
                 __LOADLOCR6:
000720 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000721 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000722 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000723 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000724 8119      	LDD  R17,Y+1
000725 8108      	LD   R16,Y
000726 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  36 r1 :  22 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  37 r17:  34 r18:  45 r19:  23 r20:  29 r21:  70 r22:  43 r23:  36 
r24:  38 r25:  31 r26: 148 r27:  65 r28:  20 r29:   1 r30: 332 r31: 143 
x  :  23 y  : 293 z  :  15 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  17 add   :  10 
adiw  :  33 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  24 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  12 
brlt  :   2 brmi  :   6 brne  :  52 brpl  :   6 brsh  :   2 brtc  :   2 
brts  :   1 brvc  :   2 brvs  :   3 bset  :   0 bst   :   0 call  :  98 
cbi   :   7 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 cln   :   0 
clr   :  26 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   6 
cp    :   6 cpc   :  11 cpi   :  50 cpse  :   0 dec   :  12 des   :   0 
eor   :   5 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   4 inc   :   3 jmp   :  27 ld    :  34 ldd   : 126 ldi   : 187 
lds   :   0 lpm   :  14 lsl   :  11 lsr   :   1 mov   :  38 movw  :  25 
mul   :  10 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   2 
ori   :   7 out   :  50 pop   :  17 push  :  16 rcall :  42 ret   :  51 
reti  :   0 rjmp  : 114 rol   :  25 ror   :   7 sbc   :   7 sbci  :   7 
sbi   :  10 sbic  :   2 sbis  :  16 sbiw  :  29 sbr   :   1 sbrc  :   3 
sbrs  :  12 sec   :   3 seh   :   0 sei   :   1 sen   :   0 ser   :   8 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  97 std   :  62 sts   :   2 sub   :   4 subi  :  17 swap  :   1 
tst   :  16 wdr   :   1 
Instructions used: 76 out of 116 (65.5%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000e4e   3308    354   3662   32768  11.2%
[.dseg] 0x000060 0x000284      0     36     36    2048   1.8%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
